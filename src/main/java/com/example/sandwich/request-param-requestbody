
--------------------------------------------------------
Resumen de Funcionalidad
@ModelAttribute:
Funciona como un objeto: Toma todos los datos del formulario y los mapea a un objeto completo (como un DTO o una entidad).
Conveniencia: Ideal para formularios complejos donde se necesita capturar múltiples campos y trabajar con ellos como un solo objeto.
Ejemplo: Si tienes un formulario con varios campos (nombre, apellido, email, etc.), puedes usar @ModelAttribute para recibir todos esos campos en un solo objeto.
@RequestParam:
Funciona como parámetros individuales: Permite extraer solo los parámetros específicos que necesitas de la solicitud.
Flexibilidad: Útil cuando solo necesitas uno o unos pocos valores de la solicitud y no quieres crear un objeto completo.
Ejemplo: Si solo necesitas el nombre y el email de un formulario, puedes usar @RequestParam para obtener solo esos dos valores.
Comparación Visual
| Característica | @ModelAttribute                                          | @RequestParam |
| Mapeo         | Mapea un objeto completo                                  | Extrae parámetros individuales |
| Uso típico    | Formularios complejos                                     | Parámetros específicos |
| Ejemplo de uso| public String register(@ModelAttribute RegisterDTO dto)   | public String register(@RequestParam String name) |

Conclusión
Ambos se utilizan para manejar datos de solicitudes en Spring,
pero la elección entre @ModelAttribute y @RequestParam
depende de la estructura de los datos que estás manejando
y de cómo prefieres trabajar con ellos.
Si necesitas un objeto completo, @ModelAttribute es la mejor opción.
Si solo necesitas unos pocos valores, @RequestParam es más adecuado.

-- y aca vamos con las estructuras que dependen
* primero que nada hay formas de poder usar estas etiquetas
 -> me refiero a @requestParam o @ModelAttribute a la hora de como usar sus datos que recibe el backend.
 -> existe formas de representar tambien como lo queres RECIBIR al backend
 --> una forma de representarlo es en JSON, es una objeto en si, que toma todos los datos y lo convierte en objeto JSON
* se lo asocia al programador con el uso exhauto con api-rest
* pero no solo eso, sino tambien puede recibirlo como tipo de dato segun este en el html, sin pasar por un JSON
* tambien existe otra forma de como recibirlo, por xml (x ejemplo, que no lo uso)
* pero bueno. si decido recibir un objeto completo si necesidad de que me lo devuelva como objeto
--------------------------- MODEL ATTRIBUJE + SRPING (return HTML) -----------------------------
    -> uso ModelAttribute, que a todos los datos que ingrrese por post, lo devuelve con su tipo (no pasa por json)
        @Controller
        public class LoginController {

            @PostMapping("/login")
            public String login(@ModelAttribute UserLoginRequest userLogin, Model model) {
                if ("usuario@example.com".equals(userLogin.getEmail()) && "12345".equals(userLogin.getPassword())) {
                    model.addAttribute("message", "Login exitoso");
                    return "home"; // Redirige a la vista home.html
                } else {
                    model.addAttribute("message", "Credenciales incorrectas");
                    return "login"; // Redirige a la vista login.html
                }
            }
        }

        <form action="/login" method="POST">
            <input type="email" name="email" placeholder="Email" required />
            <input type="password" name="password" placeholder="Password" required />
            <button type="submit">Login</button>
        </form>
-------------------------------  MODEL ATTRIBUTE + JSON ? => MODELATTRIBUTE NO TRABAJA CON JSON --------------------------------
   * NO TRABJA CON JSON modelAttribute, lo que hace mas bien , es trabajar o mapear en FORMDATA
    @Controller
    public class LoginController {

        @PostMapping("/login")
        @ResponseBody
        public Map<String, Object> login(@ModelAttribute UserLoginRequest userLogin) {
            Map<String, Object> response = new HashMap<>();

            if ("usuario@example.com".equals(userLogin.getEmail()) && "12345".equals(userLogin.getPassword())) {
                response.put("success", true);
                response.put("message", "Login exitoso");
            } else {
                response.put("success", false);
                response.put("message", "Credenciales incorrectas");
            }

            return response;
        }
    }
    document.getElementById("loginForm").addEventListener("submit", function(event) {
        event.preventDefault(); // Evitar recarga de la página

        let formData = new FormData(this); // Captura automáticamente los datos del formulario

        fetch('/login', {
            method: 'POST',
            body: formData // Enviar como FormData, no JSON
        })
        .then(response => response.json()) // Convertir respuesta a JSON
        .then(data => {
            if (data.success) {
                alert(data.message);
                window.location.href = "/home"; // Redirigir si es exitoso
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("Hubo un problema con el login.");
        });
    });
    <form id="loginForm">
        <input type="email" name="email" placeholder="Email" required />
        <input type="password" name="password" placeholder="Password" required />
        <button type="submit">Login</button>
    </form>
    * clave es que el JS tiene que tener un objeto FormData que capture todo los datos que se se le este pasando por el html
    * PERO COMO NO TRABAJA CON JSON, entonces para el backend le llega en otro formato y debes acoplarte

    * ahora que pasa si en realidad lo que yo quiero es tomar 2 valores de todo un formulario que esta en el html?
    -> depende tambien que voy a hacer con esos datos .
    ** si esos datos solamente es una validacion simple y donde es la relacion entre java-html sin necesidad de que haya
    ** dinamismo en el front, osea SIN AGREGAR UN JS , entonces puedo TRABAJAR SIN JSON
    --------- Y ACA ES EL USO DE REQUESTPARAM por cada valor , sin JS, solo trabajando con SPRING
    ----------------------- REQUEST PARAM + SPRING (return un HTML)-----------------------------------
    @Controller
    public class LoginController {

        @PostMapping("/login")
        public String login(@RequestParam String email, @RequestParam String password, Model model) {
            if ("usuario@example.com".equals(email) && "12345".equals(password)) {
                model.addAttribute("message", "Login exitoso");
                return "home"; // Redirige a la vista home.html
            } else {
                model.addAttribute("message", "Credenciales incorrectas");
                return "login"; // Redirige a la vista login.html
            }
        }
    }
    <form action="/login" method="POST">
        <input type="email" name="email" placeholder="Email" required />
        <input type="password" name="password" placeholder="Password" required />
        <button type="submit">Login</button>
    </form>

    ** el hecho de que tome 2 valores, el email y password, sin tomar desde un json
    ** me esta diciendo que el ENDPOINT debera tener , en su aprte de la ruta, algo de estilo ?email=xxx&&pass=xxxxxx
    * por que recorda que no HAY UN OBJETO que encapsule esa informacion!
    ** a groso modo, por que en realidad password no deberia estar contemplado jaja. re inseguro

    *que pasa si en realidad quiero usar estos mismos valores, pero que lleguen por json ? ahi cambia la cosa
    ** REQUESTPARAM  ya no sirve (lo MISMO QUE MODELATTRIBUTE)
    ** lo que sucede es que REQUESTPARAM labura MEJOR con una URL en el endopoit
    *** asi como decir www.xxx.cc/email?=xxx&&pass=?ds1d ,
    ** mas teniendo en cuenta que el html tiene un input para email e input para pass


    ----------------------------------- REQUESTBODY + JSON ---------------------------------------------
    - el REQUESTBODY basicamente lo que hace es mapear todo lo que le llegue del FRONT al back en OBJETO JSON
    - pero recorda que el objeto JSON no puede lleguar asi nomas desde el html, tiene que pasar por un JS
    - este JS encapsula los datos que esta en el HTML EN UN JSON
    - y recorda que al encapsularlo, se lo guarda en un HASHMAP y puedo hacer una respuesta para que lo tome JS

    @RestController OR CONTROLLER
    public class LoginController {

        @PostMapping("/login")
        public Map<String, Object> login(@RequestBody UserLoginRequest userLogin) {
            Map<String, Object> response = new HashMap<>();

            if ("usuario@example.com".equals(userLogin.getEmail()) && "12345".equals(userLogin.getPassword())) {
                response.put("success", true);
                response.put("message", "Login exitoso");
            } else {
                response.put("success", false);
                response.put("message", "Credenciales incorrectas");
            }

            return response; // Devuelve JSON al frontend
        }
    }
    - y con este JS, es su formato para que le lleguen encapsular los datos del HTML y como se los pasa al BACK
    - y tiene un then(data=> ---) por que maneja luego los mensajes que envia el back hacia el front pasando por JS

    document.getElementById("loginForm").addEventListener("submit", function(event) {
        event.preventDefault(); // Evita la recarga de la página

        let email = document.getElementById("email").value;
        let password = document.getElementById("password").value;

        fetch('/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email: email, password: password })
        })
        .then(response => response.json()) // Convierte la respuesta a JSON
        .then(data => {
            if (data.success) {
                alert(data.message);
                window.location.href = "/home"; // Redirige si es exitoso
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("Hubo un problema con el login.");
        });
    });

    <form id="loginForm">
        <input type="email" id="email" placeholder="Email" required />
        <input type="password" id="password" placeholder="Password" required />
        <button type="submit">Login</button>
    </form>

    ----------------------- RESPONSE BODY --------------------------------
    BUENO. antes con los demas era una combinacion entre las cosas
    -- si solo era requestparam , se trabaja con SPRING o con JSON (falto ejemplo con JSON) -
            recorda que requestparam es para algunos parametros pasado por html o url
    -- si solo quiero modelAttribute, se trabaja con un mapeo de todos los datos del HTML , PERO NO trabaja con JSON

    ahora lo mismo con RESPONSE BODY
    si combinacion puede ser con REQUESTPARAM + SPRING-
    - recorda que lo que hace request param es que te lleguen ALGUNOS datos desde el HTML, sin pasar por JSON
    pero yo puedo hacer que trabaje esos datos como JSON  y devolver un JSON

    @RestController or CONTROLLER + RESPONSEBODY -- esto es mas para una API en si
    @RequestMapping("/api")
    public class UserController {

        @PostMapping("/register")
        public ResponseEntity<Map<String, String>> registerUser(@RequestBody User user) {
            Map<String, String> response = new HashMap<>();
            response.put("message", "Registro exitoso para " + user.getName());
            return ResponseEntity.ok(response);  // Devuelve JSON
        }
    }
    fetch('/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: "Juan", email: "juan@mail.com" })
    })
    .then(response => response.json())  // Convierte la respuesta en JSON
    .then(data => console.log(data.message));  // Muestra el mensaje en consola


-------------------------------------------------------------------
algunas palabras - sobre MODELATTRIBUTE- es conveniente usarlo cuando:
Cuando recibes formularios HTML tradicionales sin JavaScript.
✔ Cuando necesitas prellenar formularios con datos previos.
✔ Cuando quieres validar datos antes de guardarlos.
✔ Cuando trabajas con Thymeleaf o JSP y necesitas pasar datos a la vista.

Si usas JavaScript y JSON, lo mejor es @RequestBody. Pero @ModelAttribute sigue siendo muy útil cuando trabajas
con Spring MVC sin frontend dinámico.

------------------------------------------------------------------
algunas palabras - sobre REQUEST PARAM + thymeleaf

@Controller
@RequestMapping("/productos")
public class ProductoController {

    @GetMapping("/buscar")
    public String buscarProducto(@RequestParam String nombre, Model model) {
        List<Producto> productos = productoService.buscarPorNombre(nombre);
        model.addAttribute("productos", productos);
        return "lista-productos"; // Devuelve la vista Thymeleaf
    }
}

<form action="/productos/buscar" method="get">
    <input type="text" name="nombre" placeholder="Buscar producto">
    <button type="submit">Buscar</button>
</form>

<!-- Mostrar productos -->
<ul>
    <li th:each="producto : ${productos}" th:text="${producto.nombre}"></li>
</ul>

---------------------------------------------------------------------------
-- este es un ejemplo de requestbody + response body (que rescontroller contempla esta ultima anotacion)
-- sino puedo poner Controller + ResponseBody
@RestController
@RequestMapping("/productos")
public class ProductoController {

    @PostMapping("/buscar")
    public ResponseEntity<List<Producto>> buscarProducto(@RequestBody Map<String, String> datos) {
        String nombre = datos.get("nombre");
        List<Producto> productos = productoService.buscarPorNombre(nombre);
        return ResponseEntity.ok(productos);
    }
}

<form id="buscarForm">
    <input type="text" id="nombreProducto" placeholder="Buscar producto">
    <button type="submit">Buscar</button>
</form>

<ul id="listaProductos"></ul>

<script>
document.getElementById("buscarForm").addEventListener("submit", function(event) {
    event.preventDefault();
    let nombre = document.getElementById("nombreProducto").value;

    fetch("/productos/buscar", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ nombre: nombre })
    })
    .then(response => response.json())
    .then(data => {
        let lista = document.getElementById("listaProductos");
        lista.innerHTML = "";
        data.forEach(producto => {
            let item = document.createElement("li");
            item.textContent = producto.nombre;
            lista.appendChild(item);
        });
    });
});
</script>